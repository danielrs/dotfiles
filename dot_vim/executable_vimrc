" ----------------
" Setting up vimdir
" ----------------

let vimdir = '$HOME/.vim'
if has("win32")
  let vimdir = '$HOME/vimfiles'
endif

" ----------------
" Vim configuration
" ----------------

set encoding=utf8

" syntax
filetype plugin indent on
syntax on
syntax enable

" editor UI
set guicursor=
set number
set cursorline
set showcmd
set scrolloff=4 " Always n lines visible when scrolling

" relative numbers
nnoremap <silent> <A-n> :set relativenumber! relativenumber?<CR>
nnoremap <silent> <Esc>n :set relativenumber! relativenumber?<CR>

" copy and paste from system clipboard
nnoremap <Leader>y "+y
nnoremap <Leader>p "+p

" indentation
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set shiftround
set autoindent

" search
set wildmenu
set incsearch
set hlsearch
nnoremap <silent> <space> :set hlsearch! hlsearch?<CR>
set showmatch

" undo
if has('persistent_undo')
  let myundodir = expand(vimdir . '/undodir')
  " create undo dirs
  if empty(glob(myundodir))
	  call system('mkdir ' . vimdir)
	  call system('mkdir ' . myundodir)
  endif
  let &undodir = myundodir
  set undofile
  set undolevels=1000 " max number of changes that can be undone
  set undoreload=10000 " mx number of changes to save on buffer reload
endif

" folding
set foldenable
set foldlevelstart=10
set foldnestmax=10
set foldmethod=indent

" file settings
set backspace=indent,eol,start
set fileformat=unix
set fileformats=unix,dos

" no backups (most stuff is using version control anyways)
set nobackup
set nowb
set noswapfile

" window Switching
nnoremap <silent> <A-k> :wincmd k<CR>
nnoremap <silent> <A-j> :wincmd j<CR>
nnoremap <silent> <A-h> :wincmd h<CR>
nnoremap <silent> <A-l> :wincmd l<CR>

nnoremap <silent> <Esc>k :wincmd k<CR>
nnoremap <silent> <Esc>j :wincmd j<CR>
nnoremap <silent> <Esc>h :wincmd h<CR>
nnoremap <silent> <Esc>l :wincmd l<CR>

" remove trailing whitespace before saving buffer
autocmd BufWritePre * :%s/\s\+$//e

" extra files
augroup filetype
  autocmd!
  " GLSL
  autocmd BufNewFile,BufRead *.vert,*.frag,*.tesc,*.tese,*.geom,*.comp set filetype=c
  " jflex
  autocmd BufNewFile,BufRead *.flex,*.jflex set filetype=jflex
  " Haskell
  autocmd BufNewFile,BufRead *.hamlet set filetype=html
  autocmd BufNewFile,BufRead *.lucius,*.cassius set filetype=css
  autocmd BufNewFile,BufRead *.julius set filetype=javascript
augroup END
autocmd Syntax jflex so $VIM/vimfiles/syntax/jflex.vim

" ----------------
" Plugins
" ----------------

" to sort plugins use :sort/.*\//
call plug#begin('~/.vim/plugged')
Plug 'rking/ag.vim'
Plug 'chriskempson/base16-vim'
Plug 'mattn/emmet-vim'
Plug 'othree/html5.vim'
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdtree'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'rust-lang/rust.vim'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-commentary'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'elixir-lang/vim-elixir'
Plug 'dag/vim-fish'
Plug 'pangloss/vim-javascript'
Plug 'google/vim-jsonnet'
Plug 'groenewege/vim-less'
Plug 'hynek/vim-python-pep8-indent'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
call plug#end()

" Vim plugins
" ----------------

" ag.vim
" TODO

" base16-vim
set background=light
" set background=dark
set fillchars+=vert:â”‚
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif
" disables opaque background
hi Normal ctermbg=none
hi NonText ctermbg=none

" emmet-vim
let g:user_emmet_install_global = 0
autocmd FileType html,css,eelixir EmmetInstall

" html5.vim
" TODO

" lightline.vim
let g:lightline = { 'colorscheme': 'solarized' }
" let g:lightline = { 'colorscheme': 'jellybeans' }
set laststatus=2

" nerdtree
map <C-n> :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" rainbow_parentheses.vim
nnoremap <A-p> :RainbowParentheses!!<CR>
nnoremap <Esc>p :RainbowParentheses!!<CR>
augroup rainbow_lisp
  autocmd!
  autocmd FileType clojure,lisp,scheme RainbowParentheses
augroup END

" rust.vim
let g:rustfmt_autosave = 1

" tabular
" TODO

" vim-commentary
" TODO

" vim-cpp-enhanced-highlight
" TODO

" vim-elixir
" TODO

" vim-javascript
" TODO

" vim-jsonnet
" TODO

" vim-less
" TODO

" vim-python-pep8-indent'
" TODO

" vim-sleuth
" TODO

" vim-surround
" TODO
